name: CI Intégration Continue - Jeu Python

on:
  push:
    branches-ignore:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  tests:
    name: 🔍 Tests & Lint
    runs-on: ubuntu-latest

    steps:
      - name: 🛎️ Checkout du code
        uses: actions/checkout@v3

      - name: ⚙️ Configuration Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Installer les dépendances
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🧪 Lancer les tests
        run: python test/test.py

      - name: 🧹 Lint avec flake8
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  code-analysis:
    name: 🧠 Analyse Qualité & Sécurité Python
    runs-on: ubuntu-latest

    steps:
      - name: 🛎️ Checkout du code
        uses: actions/checkout@v3

      - name: ⚙️ Installer Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Installer les outils d’analyse
        run: |
          python -m pip install --upgrade pip
          pip install bandit pylint mypy safety black

      - name: 🔍 Analyse de sécurité avec Bandit
        run: |
          bandit -r . -ll -ii

      - name: 🧠 Analyse statique avec Pylint
        run: |
          pylint $(find . -name "*.py" -not -path "./venv/*") --fail-under=8.0

      - name: 🧪 Vérification des types avec MyPy
        run: |
            mypy RPG/ --explicit-package-bases

      - name: 🧷 Vérification des vulnérabilités (dépendances) avec Safety
        run: |
          pip install -r requirements.txt
          safety check --full-report

      - name: 🎨 Vérification du formatage avec Black
        run: |
          black .


  create-failure-branch:
    name: 🚨 Créer une branche failure/<sha> si échec
    needs: tests
    if: failure() && github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest

    steps:
      - name: 🛎️ Checkout complet
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 🧾 Configurer Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: 🔐 Obtenir le SHA du commit
        id: sha
        run: echo "sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: 🌱 Créer la branche failure/${{ steps.sha.outputs.sha }}
        run: |
          git checkout -b failure/${{ steps.sha.outputs.sha }}
          git push origin failure/${{ steps.sha.outputs.sha }}

  merge-develop-to-main:
    name: 🚀 Merge automatique develop → main
    needs: [tests, code-analysis]
    if: github.ref == 'refs/heads/develop' && success()
    runs-on: ubuntu-latest

    steps:
      - name: 🛎️ Checkout complet
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 🧾 Configurer Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: 🔀 Merger develop → main
        run: |
          git fetch origin main
          git checkout main
          git merge origin/develop --no-ff -m "Merge automatique de develop vers main via CI"
          git push origin main
